name: Scala CI

on: [ push, pull_request ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Cache coursier cache
      uses: actions/cache@v1
      with:
        path: ~/.coursier/cache
        key: ${{ runner.os }}-coursier-cache-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('project/**/*.scala') }}
        restore-keys: |
          ${{ runner.os }}-coursier-cache-${{ hashFiles('**/*.sbt') }}
          ${{ runner.os }}-coursier-cache

    - name: Cache ivy cache
      uses: actions/cache@v1
      with:
        path: ~/.ivy2/cache
        key: ${{ runner.os }}-ivy-cache-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('project/**/*.scala') }}
        restore-keys: |
          ${{ runner.os }}-ivy-cache-${{ hashFiles('**/*.sbt') }}
          ${{ runner.os }}-ivy-cache

    - name: Cache sbt
      uses: actions/cache@v1
      with:
        path: ~/.sbt
        key: ${{ runner.os }}-sbt-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('project/**/*.scala') }}
        restore-keys: |
          ${{ runner.os }}-sbt-${{ hashFiles('**/*.sbt') }}
          ${{ runner.os }}-sbt

    - name: Cache IntelliJ IDEA SDK
      uses: actions/cache@v1
      with:
        path: ~/.RubyRefactoringsPluginIU/sdk
        key: ${{ runner.os }}-idea-${{ hashFiles('project/**/*.scala') }}
        restore-keys: |
          ${{ runner.os }}-idea

    - name: Test & Package
      run: sbt test packagePluginZip

    - name: IntelliJ Platform Plugin Verifier
      uses: ChrisCarini/intellij-platform-plugin-verifier-action@v1.0.3
      with:
        plugin-location: 'target/RubyRefactorings-*.zip'
        ide-versions: |
          ideaIU:LATEST-EAP-SNAPSHOT

    - name: Get commit timestamp
      uses: actions/github-script@0.3.0
      id: commit-timestamp
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        debug: true
        script: |
          const commit_details = await github.git.getCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha
          });
          return Date.parse(commit_details.data.author.date) / 1000;
    - run: echo "$COMMITTED_AT"
      env:
        COMMITTED_AT: ${{ steps.commit-timestamp.outputs.result }}